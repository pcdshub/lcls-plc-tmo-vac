<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="PRG_Hutch_Beamline_Valves" Id="{ad03d7af-b77d-4459-ab88-d78a941b69c0}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM PRG_Hutch_Beamline_Valves
VAR
    LAMP_C2_GCC_01: FB_MKS500; // wrong. only need temporary before integrate with LAMP
    xAll_Turbo_isRunning : BOOL := False;


    ton_PA1K4_IP1_PTM_01_notRunning : TON;
    ton_PA1K4_IP1_PTM_02_notRunning : TON;
    ton_PA1K4_IP1_PTM_03_notRunning : TON;
    ton_IM4K4_PPM_PTM_01_notRunning : TON;
    ton_LI1K4_IP1_PTM_01_notRunning : TON;
    ton_LI3K4_IP1_OUT_PTM_01_notRunning : TON;
    ton_TM1K4_PTM_01_notRunning : TON;
    ton_IM5K4_PPM_PTM_01_notRunning : TON;

    tDelOK	:	TIME := T#30S;
    xExtIlkOK : BOOL;

    PA1K4_IP1_PTM_01_isRunning: BOOL;
    PA1K4_IP1_PTM_02_isRunning: BOOL;
    PA1K4_IP1_PTM_03_isRunning: BOOL;
    IM4K4_PPM_PTM_01_isRunning: BOOL;
    LI1K4_IP1_PTM_01_isRunning: BOOL;
    LI3K4_IP1_OUT_PTM_01_isRunning: BOOL;
    TM1K4_PTM_01_isRunning: BOOL;
    IM5K4_PPM_PTM_01_isRunning: BOOL;

    xValves_are_OPN_OK : BOOL;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* Beamline window valves use VGC function. Valves allow to open when both upstream and downstream gauges
    reading pressure below than setpoints,  all turbo pumps are running and no faults, and all beamline valves
    in hutch are OPN_OK*)

(* check turbo pump status	*)
PA1K4_IP1_PTM_01_isRunning := PA1K4_IP1_PTM_01.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_PA1K4_IP1_PTM_01_notRunning(IN:= NOT PA1K4_IP1_PTM_01_isRunning, PT:=tDelOK);

PA1K4_IP1_PTM_02_isRunning := PA1K4_IP1_PTM_02.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_PA1K4_IP1_PTM_02_notRunning(IN:= NOT PA1K4_IP1_PTM_02_isRunning, PT:=tDelOK);

PA1K4_IP1_PTM_03_isRunning := PA1K4_IP1_PTM_03.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_PA1K4_IP1_PTM_03_notRunning(IN:= NOT PA1K4_IP1_PTM_03_isRunning, PT:=tDelOK);

IM4K4_PPM_PTM_01_isRunning := IM4K4_PPM_PTM_01.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_IM4K4_PPM_PTM_01_notRunning(IN:= NOT IM4K4_PPM_PTM_01_isRunning, PT:=tDelOK);

LI1K4_IP1_PTM_01_isRunning := LI1K4_IP1_PTM_01.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_LI1K4_IP1_PTM_01_notRunning(IN:= NOT LI1K4_IP1_PTM_01_isRunning, PT:=tDelOK);

LI3K4_IP1_OUT_PTM_01_isRunning := LI3K4_IP1_OUT_PTM_01.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_LI3K4_IP1_OUT_PTM_01_notRunning(IN:= NOT LI3K4_IP1_OUT_PTM_01_isRunning, PT:=tDelOK);

TM1K4_PTM_01_isRunning := TM1K4_PTM_01.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_TM1K4_PTM_01_notRunning(IN:= NOT TM1K4_PTM_01_isRunning, PT:=tDelOK);

IM5K4_PPM_PTM_01_isRunning := IM5K4_PPM_PTM_01.iq_stPTM.eState = E_PumpState.pumpRUNNING;
ton_IM5K4_PPM_PTM_01_notRunning(IN:= NOT IM5K4_PPM_PTM_01_isRunning, PT:=tDelOK);

xTurboFault := ton_PA1K4_IP1_PTM_01_notRunning.Q OR ton_PA1K4_IP1_PTM_02_notRunning.Q OR
               ton_PA1K4_IP1_PTM_03_notRunning.Q OR ton_IM4K4_PPM_PTM_01_notRunning.Q OR
               ton_LI1K4_IP1_PTM_01_notRunning.Q OR ton_LI3K4_IP1_OUT_PTM_01_notRunning.Q OR
                ton_TM1K4_PTM_01_notRunning.Q OR ton_IM5K4_PPM_PTM_01_notRunning.Q
                OR NOT IP1_TURBOS_ALL_AtSpd;

(* check beamline valve OPEN permit *)
(*xValves_are_OPN_OK :=  MR2K4_KBO_VWC_01.iq_stValve.xOPN_OK AND MR3K4_KBO_VWC_01.iq_stValve.xOPN_OK AND
                       LI3K4_IP1_VWC_01.iq_stValve.xOPN_OK AND PC5K4_VWC_01.iq_stValve.xOPN_OK ; *)

(*if not all beamline valves are OPN_OK, close all beamline valves*)
(*IF NOT xValves_are_OPN_OK Then
    MR2K4_KBO_VWC_01.M_Set_OPN_SW(false);
    MR3K4_KBO_VWC_01.M_Set_OPN_SW(false);
    LI3K4_IP1_VWC_01.M_Set_OPN_SW(false);
    PC5K4_VWC_01.M_Set_OPN_SW(false);
    xBeamlineValveFault := True;
ElSE
   xBeamlineValveFault := False;
END_IF
*)



MR2K4_KBO_VWC_01(
                i_stUSG := PC4K4_XTES_GCC_01.IG,
                i_stDSG:= MR2K4_KBO_GCC_01.IG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE ,
                i_xExt_OK := TRUE,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := xReset_PMPS_FFO2,
                iq_stValve =>,
                io_fbFFHWO :=g_FastFaultOutput2,
                fbArbiter := g_fbArbiter2,
                i_nTransitionRootID := 47632,
                i_sDevName := 'MR2K4-KBO-VWC-01'

);


MR3K4_KBO_VWC_01(
                i_stUSG := MR2K4_KBO_GCC_01.IG,
                i_stDSG:= PA1K4_IP1_GCC_01.IG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE ,
                i_xExt_OK := NOT xTurboFault AND MR3K4_KBO_VFS_Interface.i_xVAC_FAULT_OK,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := xReset_PMPS_FFO2,
                iq_stValve =>,
                io_fbFFHWO :=g_FastFaultOutput2,
                fbArbiter := g_fbArbiter2,
                i_nTransitionRootID := 47648,
                i_sDevName := 'MR3K4-KBO-VWC-01'

);

LI3K4_IP1_VWC_01(
                i_stUSG := IP1_MAIN_GAUGE.VG,
                i_stDSG:= IM5K4_PPM_GCC_01.IG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE ,
                i_xExt_OK := NOT xTurboFault,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := xReset_PMPS_FFO2,
                iq_stValve =>,
                io_fbFFHWO :=g_FastFaultOutput2,
                fbArbiter := g_fbArbiter2,
                i_nTransitionRootID := 47664,
                i_sDevName := 'LI3K4-IP1-VWC-01'
);

PC5K4_VWC_01(
                i_stUSG := IM5K4_PPM_GCC_01.IG,
                i_stDSG:= PA2K4_IP1_GCC_01.IG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE,
                i_xExt_OK := NOT xTurboFault,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := xReset_PMPS_FFO5,
                iq_stValve =>,
                io_fbFFHWO :=g_FastFaultOutput5,
                fbArbiter := g_fbArbiter3,
                i_nTransitionRootID := 47680,
                i_sDevName := 'PC5K4-VWC-01'
);

MR4K4_KBO_VWC_01(
                i_stUSG := PA2K4_IP1_GCC_01.IG,
                i_stDSG:= MR4K4_KBO_GCC_01.IG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE,
                i_xExt_OK := NOT xTurboFault,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := xReset_PMPS_FFO2,
                iq_stValve =>,
                io_fbFFHWO :=g_FastFaultOutput5,
                fbArbiter := g_fbArbiter3,
                i_nTransitionRootID := 47696,
                i_sDevName := 'MR4K4-KBO-VWC-01'
);
// when dream arrives, this needs to be changes to dream gauge(downstream)
MR5K4_KBO_VWC_01(
                i_stUSG := MR4K4_KBO_GCC_01.IG,
                i_stDSG := stDreamMainGauge,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE,
                i_xExt_OK := NOT xTurboFault,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := xReset_PMPS_FFO2,
                iq_stValve =>,
                io_fbFFHWO :=g_FastFaultOutput5,
                fbArbiter := g_fbArbiter3,
                i_nTransitionRootID := 47697,
                i_sDevName := 'MR5K4-KBO-VWC-01'
);
//Currently there is no dream, so TM2K4 valve is always open during this configuration
TM2K4_KBO_VWC_01(
                i_stUSG := stDreamMainGauge,
                i_stDSG := TM2K4_KBO_GCC_01.IG,
                i_xDis_DPIlk := FALSE,
                i_xEPS_OK := TRUE,
                i_xPMPS_OK := TRUE,
                i_xExt_OK := NOT xTurboFault,
                i_xOverrideMode := xSystemOverrideMode_TMO,
                i_xReset := xReset_PMPS_FFO5,
                iq_stValve =>,
                io_fbFFHWO :=g_FastFaultOutput5,
                fbArbiter := g_fbArbiter3,
                i_nTransitionRootID := 47698,
                i_sDevName := 'TM2K4-KBO-VWC-01'
);

//VFV Valves
TMO_ROUGH1_VFV_01(i_xExtIlkOK := FALSE);
//interlock changes again on 2-28-25 after James and Tong discuss upon Jing's request
TMO_ROUGH1_VFV_02(i_xExtIlkOK := TMO_ROUGH1_VRC_01.M_IsClosed() AND TMO_ROUGH2_VRC_01.M_IsClosed()AND MR3K4_KBO_VWC_01.M_IsClosed() AND LI3K4_IP1_VWC_01.M_IsClosed());



TMO_ROUGH1_VFV_03(i_xExtIlkOK := TMO_ROUGH1_VRC_02.M_IsClosed() AND LI3K4_IP1_VWC_01.M_IsClosed() AND MR4K4_KBO_VWC_01.M_IsClosed());
//Jing, James and Tong discuss in 2-28-25 below vent procesure does not include the details of IP1 avaiblity venting due to uncertainty configuration of IP1
//TMO_ROUGH2_VFV_01(i_xExtIlkOK := TMO_ROUGH1_VRC_01.M_IsClosed() AND TMO_ROUGH2_VRC_01.M_IsClosed());
IF IP1_ECAT_COM_ERROR THEN //If IP1 and Tmo beamline detect communication error,assuming IP1_ROUGH_VRC_02 open, tend to vent entire end station
    TMO_ROUGH2_VFV_01(i_xExtIlkOK := TMO_ROUGH1_VRC_01.M_IsClosed() AND TMO_ROUGH2_VRC_01.M_IsClosed()AND MR3K4_KBO_VWC_01.M_IsClosed() AND LI3K4_IP1_VWC_01.M_IsClosed());
ELSIF (IP1_ROUGH_VRC_02_AtOpnLS )THEN // vent entire end station
     TMO_ROUGH2_VFV_01(i_xExtIlkOK := TMO_ROUGH1_VRC_01.M_IsClosed() AND TMO_ROUGH2_VRC_01.M_IsClosed()AND MR3K4_KBO_VWC_01.M_IsClosed() AND LI3K4_IP1_VWC_01.M_IsClosed());
    ELSE //vent part of the IP1 when IP1_ROUGH_VRC_02 is not open
     TMO_ROUGH2_VFV_01(i_xExtIlkOK := TMO_ROUGH2_VRC_01.M_IsClosed());
END_IF




]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>